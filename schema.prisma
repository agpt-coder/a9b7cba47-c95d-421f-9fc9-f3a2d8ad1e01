// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id                  String               @id @default(dbgenerated("gen_random_uuid()"))
  email               String               @unique
  password            String
  role                Role                 @default(STUDENT)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  feedbacks           Feedback[]
  templates           Template[]
  dialogues           Dialogue[]
  integrationSettings IntegrationSetting[]
  analyticsRecords    AnalyticsRecord[]

  @@map("users")
}

model Template {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String?
  content     Json
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("templates")
}

model Dialogue {
  id             String         @id @default(dbgenerated("gen_random_uuid()"))
  sessionId      String
  startTimestamp DateTime       @default(now())
  endTimestamp   DateTime?
  dialogues      Json
  status         DialogueStatus
  userId         String?
  user           User?          @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("dialogues")
}

model Feedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  rating    Int
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

model IntegrationSetting {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  service     String
  credentials Json
  enabled     Boolean @default(true)
  userId      String?
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("integration_settings")
}

model AnalyticsRecord {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  eventName  String
  eventData  Json
  occurredAt DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics_records")
}

enum Role {
  TUTOR
  STUDENT
  ADMIN
}

enum DialogueStatus {
  IN_PROGRESS
  COMPLETED
  ABORTED
}

